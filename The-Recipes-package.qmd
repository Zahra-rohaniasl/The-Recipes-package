Packages
We will use the following package in this lab.

```{r}
library(magrittr)   # the pipe
library(tidyverse)  # for data wrangling + visualization
library(tidymodels) # for modeling
library(gt)         # for pretty tables
theme_set(theme_bw(base_size = 12))
boston_cocktails <- readr::read_csv('../data/boston_cocktails.csv', show_col_types = FALSE)
```

Data: The Boston Cocktail Recipes
The Boston Cocktail Recipes dataset appeared in a TidyTuesday posting. TidyTuesday is a weekly data project in R.

The dataset is derived from the Mr. Boston Bartender’s Guide, together with a dataset that was web-scraped as part of a hackathon.

## Exercises

Exercise 1
First use skimr::skim and DataExplorer::introduce to assess the quality of the data set.

Next prepare a summary. What is the median measure number across cocktail recipes?

SOLUTION:
```{r}
boston_cocktails %>% skimr::skim()

boston_cocktails %>% DataExplorer::introduce()

boston_cocktails %>% summary()
```

The median measure is 1.0. Note that the dimensions are identified as ounces (oz) in the measure column.


Exercise 2
From the boston_cocktails dataset select the name, category, ingredient, and measure_number columns and then pivot the table to create a column for each ingredient. Fill any missing values with the number zero.

Since the names of the new columns may contain spaces, clean them using the janitor::clean_names(). Finally drop any rows with NA values and save this new dataset in a variable.

How much gin is in the cocktail called Leap Frog Highball?


SOLUTION:
```{r}
cocktails_df <- boston_cocktails %>%
  # select the columns (by de-selecting the ones we don't want)
  dplyr::select(-ingredient_number, -row_id, -measure) %>%
  # pivot wider (make more columns); use zeros in place of NA values
  tidyr::pivot_wider(
    names_from = ingredient
    , values_from = measure_number
    , values_fill = 0
  ) %>%
  janitor::clean_names() %>%
  tidyr::drop_na()
# show the table in the document
cocktails_df

cocktails_df %>% 
  # filter for the desired cocktail
  dplyr::filter(name == 'Leap Frog Highball') %>% 
  dplyr::pull(gin)

```
Two ounces (oz) of gin are in the Leap Frog Highball.

Exercise 3
Prepare a recipes::recipe object without a target but give name and category as ‘id’ roles. Add steps to normalize the predictors and perform PCA. Finally prep the data and save it in a variable.

How many predictor variables are prepped by the recipe?

SOLUTION:
```{r}
# create a recipe: y~. with an outcome/target, but here we just use ~.
pca_rec <- recipes::recipe(~., data = cocktails_df) 
pca_rec %>% summary()


pca_rec <- pca_rec %>% 
  # change the roles of name and category to 'id' from 'predictor'
  recipes::update_role(name, category, new_role = "id") %>%
  # normalize the remaining predictors
  recipes::step_normalize(all_predictors()) %>%
  # convert the predictors to principle components
  recipes::step_pca(all_predictors())

# note there are 40 predictors, but that nothing has been calculated yet
pca_rec %>% summary()


# calculate prepare the data per the steps in the recipe
pca_prep <- recipes::prep(pca_rec)
pca_prep %>% summary
```

1. There are 40 predictors and 2 id variables before the data is prepped.
2. Once prepped, the PCA returns just 5 components by default, so we have (post-prep) 5 predictors and 2 id variables.


Exercise 4
Apply the recipes::tidy verb to the prepped recipe in the last exercise. The result is a table identifying the information generated and stored by each step in the recipe from the input data.

To see the values calculated for normalization, apply the recipes::tidy verb as before, but with second argument = 1.

What ingredient is the most used, on average?

SOLUTION:
```{r}
# tidy returns a tibble with the calculations performed by prep
pca_prep %>% recipes::tidy()


# if we select the first (normalization) step we get the values calculated:
# - the mean and standard deviation for each variable
foo <- pca_prep %>% recipes::tidy(1)
foo


# we can just filter to find the largest mean value
# first, isolate the mean values
foo %>% dplyr::filter(statistic == 'mean') %>% 
  # once we have just the mean values, filter out the row with the max value 
  dplyr::filter(value == max(value))

```

On average, it is gin that is the largest component of the cocktails, with just over 1/4 oz per cocktail.



Exercise 5
Now look at the result of the PCA, applying the recipes::tidy verb as before, but with second argument = 2. Save the result in a variable and filter for the components PC1 to PC5. Mutate the resulting component column so that the values are factors, ordering them in the order they appear using the forcats::fct_inorder verb.

Plot this data using ggplot2 and the code below

SOLUTION:
```{r}
ggplot(aes(value, terms, fill = terms)) +
geom_col(show.legend = FALSE) +
facet_wrap(~component, nrow = 1) +
labs(y = NULL) +
theme(axis.text=element_text(size=7),
      axis.title=element_text(size=14,face="bold"))
```


How would you describe the drinks represented by PC1?
SOLUTION:
```{r}

# the tidy operation shows the weights of each ingredient, 
# for each principal component.
# - i.e. PC1 (along with PC2 - PC5) is a weighted sum of ingredients
bar <- pca_prep %>% recipes::tidy(2)
bar


# plot to show the ingredient weights
bar %>%
  # since there are only 5 components, this is redundant
  dplyr::filter(component %in% paste0("PC", 1:5)) %>%
  # change component from a character to a factor, and give them an order
  dplyr::mutate(component = forcats::fct_inorder(component)) %>%
  # plot
  ggplot(aes(value, terms, fill = terms)) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~component, nrow = 1) +
  labs(y = NULL) +
  theme(axis.text=element_text(size=7),
        axis.title=element_text(size=14,face="bold"))

```


Exercise 6
As in the last exercise, use the variable with the tidied PCA data and use only PCA components PC1 to PC4. Take/slice the top 8 ingedients by component, ordered by their absolute value using the verb dplyr::slice_max. Next, generate a grouped table using gt::gt, colouring the cell backgrounds (i.e. fill) with green for values 
 and red for values 
.

What is the characteristic alcoholic beverage of each of the first 4 principle components.

```{r}
bar %>%
  # filter our the rows for PC1 - PC4
  dplyr::filter(component %in% paste0("PC", 1:4)) %>%
  # group by component (i.e. principal component) 
  dplyr::group_by(component) %>%
  # for each group, take the top 8 ingredients by absolute value
  dplyr::slice_max(n = 8, order_by = abs(value)) %>% 
  # now make a nicely formatted table
  gt::gt() %>% 
  # make/apply a table style: this one for values < 0
  gt::tab_style(
    style = list(
      gt::cell_fill(color = "red"),
      gt::cell_text(weight = "bold")
      ),
    locations = gt::cells_body(
      columns = value,
      rows = value < 0
    )
  ) %>% 
  # make/apply another table style: this one for values >= 0
    gt::tab_style(
    style = list(
      gt::cell_fill(color = "green"),
      gt::cell_text(weight = "bold")
      ),
    locations = gt::cells_body(
      columns = value,
      rows = value >= 0
    )
  ) %>% 
  # apply a theme; any theme will do
  gtExtras::gt_theme_espn()

```


Principal components and similar methods are very useful in reducing the complexity of our models. In this case we reduced the 40 original predictors to just 5 predictors.

The challenge with using these methods is attaching meaning to the revised predictors, and this is important when we need to explain our models. The computer can compute the new predictors but they can’t tell us what they represent. For this we need to look at the structure of the new predictors and see if we can attach some meaning to them; often the solution is to give them names that capture the underlying structure.

In this case, looking at the ingredients that make up the PCA predictors

1. PC1 represents a drink with:

- little or no sugar, egg, gin or port; some or a lot of syrup and citrus juice
- most often / mainly tequila


2. PC2 represents a drink with:

- little or no sugar, syrup, or citrus juice
- most often / mainly vermouth


3. PC3 represents a drink with::

- Little or no egg, whiskey or vodka
- most often / mainly gin

4. PC4 represents a drink with
- little or no syrup; some or a lot of juice and dairy product
- most often / mainly grenadine and vodka


Exercise 7
For this exercise, bake the prepped PCA recipe using recipes::bake on the original data and plot each cocktail by its PC1, PC2 component, using
```{r}
ggplot(aes(PC1, PC2, label = name)) +
  geom_point(aes(color = category), alpha = 0.7, size = 2) +
  geom_text(check_overlap = TRUE, hjust = "inward") + 
  labs(color = NULL)
```
Can you create an interpretation of the PCA analysis?

SOLUTION:
```{r}
# bake the dataset cocktails_df, creating a new dataset
recipes::bake(pca_prep, new_data = cocktails_df) %>%
  ggplot(aes(PC1, PC2, label = name)) +
  geom_point(aes(color = category), alpha = 0.7, size = 2) +
  geom_text(check_overlap = TRUE, hjust = "inward") + 
  labs(color = NULL)
```

In this exercise we are plotting the cocktails against the first two principal components and trying to interpret the results.

The interpretation is more difficult now than it was in the last exercise where we found an interpretation for each principal component. Now we are looking at each cocktail in terms of combinations of PC1 and PC2, both positive and negative.

It appears that the lower left quadrant (negative PC1 and PC2 values) are mainly cocktail classics. If you look at the components of PC1 and PC2 from the last exercise and negate them, you can describe the cocktails in this quadrant: they have egg /egg-white, port, sugar, no vermouth or gin or tequila.

The lower right quadrant is positive PC1 and negative PC2. PC1 contains juice and syrup, while PC2 is negative juice and syrup - so in this quadrant we have cocktails that are like PC1 (juice and syrup) and unlike PC2 (juice and syrup & sugar). The cocktails in this quadrant have citrus juice, are sweet from the use of syrup & sugar and likely have tequila.

The top half of the plot shows cocktails clustered along the PC1=0 axis, so those are mainly tequila cocktails, very much like PC2.
